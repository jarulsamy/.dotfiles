#!/usr/bin/env python3
import argparse
import json
import subprocess
import sys
from pprint import pprint

GDBUS = "/usr/bin/gdbus"

parser = argparse.ArgumentParser(
    add_help=False,
    description="Switch Gnome window focus by name",
)
parser.add_argument(
    "WINDOW_CLASS",
    help="Window to attempt to switch to",
)
args = parser.parse_args()
args = vars(args)

# We don't want any dependencies for DBUS, calling the system binary is the
# best we can do.
p = subprocess.run(
    [
        GDBUS,
        "call",
        "--session",
        "--dest",
        "org.gnome.Shell",
        "--object-path",
        "/org/gnome/Shell/Extensions/Windows",
        "--method",
        "org.gnome.Shell.Extensions.Windows.List",
    ],
    capture_output=True,
    text=True,
)

window_list = p.stdout[2:-4]
window_list = json.loads(window_list)

target_class = args["WINDOW_CLASS"].lower()

my_wins = [i for i in window_list if i.get("wm_class") == target_class]
# Could not find a matching window class
if not my_wins:
    print(f"Could not find any matching windows for {target_class}")
    exit(1)

my_wins = list(sorted(my_wins, key=lambda x: x["pid"]))

# Take the last PID, aka the newest window.
my_win = my_wins[-1]
my_win_id = my_win["id"]


# Finally, switch!
subprocess.run(
    [
        GDBUS,
        "call",
        "--session",
        "--dest",
        "org.gnome.Shell",
        "--object-path",
        "/org/gnome/Shell/Extensions/Windows",
        "--method",
        "org.gnome.Shell.Extensions.Windows.Activate",
        str(my_win_id),
    ],
    capture_output=True,
)

exit(0)
